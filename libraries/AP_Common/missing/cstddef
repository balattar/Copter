#pragma once

#include_next <cstddef>

#if defined(HAVE_STD_NULLPTR_T) && !HAVE_STD_NULLPTR_T
namespace std {
    typedef decltype(nullptr) nullptr_t;

#if defined(HAVE_STD_MOVE) && !HAVE_STD_MOVE
    template< class T > struct remove_reference      {typedef T type;};
    template< class T > struct remove_reference<T&>  {typedef T type;};
    template< class T > struct remove_reference<T&&> {typedef T type;};

    template< class T >
    typename std::remove_reference<T>::type&& move(T&& t) noexcept
    {
        return static_cast<typename std::remove_reference<T>::type&&>(t);
    }
#endif
}
#endif
